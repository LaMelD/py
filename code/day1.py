# day 1
# 문자열 다루기
# 인덱스에서 음수가 나올 수 있다. --> 뒤에서 부터 읽는다.
# 순환되진 않는다. 마찬가지로 인덱스를 넘어가면 오버플로가 난다.
a = "Life is too short, You need Python"
b = a[-10] # 음수 가능
c = a.split() # 문자열을 공백을 기준으로 나눈다.
d = a.split(",") # ','를 기준으로 나눈다.
e = a[10:15] # 간단하게 슬라이싱이 가능하다.

# ---------------------------------------------------------------------

# format의 사용
str1 = "{num} and {string}".format(num = 10, string = "스트링")
# 빈공간을 만들어 놓을 수 있다. 왼쪽 정렬
str2 = "{0:<10}".format("hi")
# 빈공간을 만들어 놓을 수 있다. 오른쪽 정렬
str3 = "{0:>10}".format("hi")
# 빈공간을 만들어 놓을 수 있다. 중앙 정렬
str4 = "{0:^10}".format("hi")
# 빈공간을 문자로 채울 수 있다. 중앙 정렬
str5 = "{0:=^10}".format("hi")
# 총 10개의 자리수를 출력하는데 소수점 뒷자리는 4자리만 출력한다.
str6 = "{0:10.4f}".format(3.412314223553)

# =====================================================================
# 리스트 다루기 --> 컴파일 언어의 배열과 비슷하다.
# 한 리스트 안에 여러가지 자료형이 뭉쳐 있어도 무관하다.
a = [1, 2, 3, ['a', 'b', 'c']]
b = a[-2] # 음수 가능
c = a[:2] # c = a[0:2]와 같은 의미이다. 0번 인덱스부터 2번 인덱스까지 slice하여 결과를 c에 넣는다.
d = a[2:] # d = a[2:마지막]과 같은 의미이다.

# 리스트 연산자


# '+' 는 뒤에 붙여 쓸 수 있다.
list1 = [1, 2, 3]
list2 = [4, 5, 6]
res = list1 + list2

# '*' 는 리스트를 반복할 수 있다
list1 = [1, 2, 3]
res = list1 * 3

# 리스트의 인덱스 수정은 위치에 접근하여 값을 수정하면 된다.
list1 = [1, 2, 3]
list1[1] = 4

# 연속된 범위의 수정
# 범위 수정을 이용하여 값을 추가할 수 있다.
list1 = [1, 2, 3, 4, 5]
list1[1:1] = ["this", "is", "python"]
# 다른 결과가 나온다.
list1[1] = ["this", "is", "python"]

# 요소 삭제하기 :: [] 사용
list1 = [1, 2, 3, 4, 5]
list1[1:3] = [] # 1번 인덱스부터 3번인덱스까지 빈 리스트로 대체한다.
# 1번 인덱스부터 3번 인덱스까지 지워진다.

# 요소 삭제하기 :: del 함수 사용
list1 = [1, 2, 3, 4, 5]
del list1[1]
del list1[1:]

# -----------------------------------------------------------------
# 리스트 관련 함수
# append() :: 요소 추가
# sort() :: 정렬
# reverse() :: 뒤집기
# index() :: 해당 위치의 인덱스 반환
# insert() :: 삽입
# remove() :: 제거
# pop() :: 가장 뒤의 요소를 돌려구조 그 요소는 삭제함
# count() :: 리스트에 포함된 요소의 갯수 세기
# extend() :: list1 + list2와 같은 의미

a = [[1,2,3], [4,5,6],[7,8,9]]
print(a[0])
print(a[0:3])